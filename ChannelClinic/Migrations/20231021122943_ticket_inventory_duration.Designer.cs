// <auto-generated />
using System;
using DBService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChannelClinic.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20231021122943_ticket_inventory_duration")]
    partial class ticket_inventory_duration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.AdmissionPrescription", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppInventoryType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AppTicketId")
                        .HasColumnType("uuid");

                    b.Property<int>("AppTicketStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("OverallDescription")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.HasKey("Id");

                    b.HasIndex("AppTicketId");

                    b.HasIndex("DoctorId");

                    b.ToTable("AdmissionPrescriptions");
                });

            modelBuilder.Entity("Models.AppAppointment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsEmergency")
                        .HasColumnType("boolean");

                    b.Property<string>("OverallDescription")
                        .HasColumnType("text");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("AppAppointments");
                });

            modelBuilder.Entity("Models.AppCost", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ApprovedPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("CostType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("FinancialApproverId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FinancialRecordId")
                        .HasColumnType("uuid");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Payments")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FinancialApproverId");

                    b.HasIndex("FinancialRecordId");

                    b.ToTable("AppCosts");
                });

            modelBuilder.Entity("Models.AppInventory", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppInventoryType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HowLow")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("NotifyWhenLow")
                        .HasColumnType("boolean");

                    b.Property<string>("Profile")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AppInventories");
                });

            modelBuilder.Entity("Models.AppInventoryDependencies", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppInventoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultAmount")
                        .HasColumnType("integer");

                    b.Property<Guid>("DependantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppInventoryId");

                    b.HasIndex("DependantId");

                    b.ToTable("AppInventoryDependencies");
                });

            modelBuilder.Entity("Models.AppInventoryItem", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AppInventoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PricePerItem")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AppInventoryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("AppInventoryItems");
                });

            modelBuilder.Entity("Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Models.AppSetting", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("Models.AppTicket", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AppCostId")
                        .HasColumnType("uuid");

                    b.Property<int>("AppInventoryType")
                        .HasColumnType("integer");

                    b.Property<int>("AppTicketStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OverallDescription")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Sent")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SentToFinance")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AppCostId")
                        .IsUnique();

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PatientId");

                    b.ToTable("AppTickets");
                });

            modelBuilder.Entity("Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("OtherName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Profile")
                        .HasMaxLength(15000)
                        .HasColumnType("character varying(15000)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Models.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Models.Company", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("ForIndividual")
                        .HasColumnType("boolean");

                    b.Property<bool>("HomeCompany")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherId")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("UniqueId")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Models.CompanyContract", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AppCostId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppCostId")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyContracts");
                });

            modelBuilder.Entity("Models.FinancialRecord", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ApprovedAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("CostType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Payments")
                        .HasColumnType("text");

                    b.Property<int>("TotalAppCosts")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FinancialRecords");
                });

            modelBuilder.Entity("Models.FinancialRecordPayerPayee", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AppCostId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FinancialRecordId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Payer")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AppCostId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FinancialRecordId");

                    b.ToTable("FinancialRecordPayerPayee");
                });

            modelBuilder.Entity("Models.FinancialRequest", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("AppCostType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<Guid?>("FinancialRecordId")
                        .HasColumnType("uuid");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FinancialRecordId");

                    b.ToTable("FinancialRequests");
                });

            modelBuilder.Entity("Models.NextOfKin", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("LastName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("OtherName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Phone1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Profile")
                        .HasMaxLength(15000)
                        .HasColumnType("character varying(15000)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("NextOfKin");
                });

            modelBuilder.Entity("Models.Patient", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Allergies")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Models.PatientContract", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AppCostId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppCostId")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.ToTable("PatientContracts");
                });

            modelBuilder.Entity("Models.PatientVital", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("NurseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NurseId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientVitals");
                });

            modelBuilder.Entity("Models.SalaryPaymentHistory", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DatePaidFor")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Savings")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Tax")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("SalaryPaymentHistories");
                });

            modelBuilder.Entity("Models.Staff", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("BankId")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<int>("ContractStaff")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastSavingPaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<DateTime>("NextSavingPaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Models.StaffContract", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffContracts");
                });

            modelBuilder.Entity("Models.StaffTimeTable", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ClockIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ClockOut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StaffClockIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StaffClockOut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffTimeTables");
                });

            modelBuilder.Entity("Models.SurgeryTicketPersonnel", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("IsHeadPersonnel")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPatient")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PersonnelId")
                        .HasColumnType("uuid");

                    b.Property<string>("SummaryOfSurgery")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("SurgeryRole")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("TicketInventoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PersonnelId");

                    b.HasIndex("TicketInventoryId");

                    b.ToTable("SurgeryTicketPersonnel");
                });

            modelBuilder.Entity("Models.TicketInventory", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalNote")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AdmissionEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("AdmissionPrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AdmissionStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("AppInventoryId")
                        .HasColumnType("uuid");

                    b.Property<int?>("AppInventoryQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AppTicketId")
                        .HasColumnType("uuid");

                    b.Property<int>("AppTicketStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ConcludedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("CurrentPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfLabTest")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepartmentDescription")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("DoctorsPrescription")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int?>("Dosage")
                        .HasColumnType("integer");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("FinanceDescription")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("Frequency")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ItemsUsed")
                        .HasColumnType("text");

                    b.Property<string>("LabRadiologyTestResult")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<bool?>("LoggedQuantity")
                        .HasColumnType("boolean");

                    b.Property<string>("PrescribedQuantity")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("Proof")
                        .HasColumnType("text");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uuid");

                    b.Property<string>("StaffObservation")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime?>("SurgeryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SurgeryTestResult")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int>("SurgeryTicketStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TimeGiven")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Times")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionPrescriptionId");

                    b.HasIndex("AppInventoryId");

                    b.HasIndex("AppTicketId");

                    b.HasIndex("StaffId");

                    b.ToTable("TicketInventories");
                });

            modelBuilder.Entity("Models.UserFile", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Base64String")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserFiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.AdmissionPrescription", b =>
                {
                    b.HasOne("Models.AppTicket", "AppTicket")
                        .WithMany("AdmissionPrescriptions")
                        .HasForeignKey("AppTicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.AppUser", "Doctor")
                        .WithMany("AdmissionPrescriptions")
                        .HasForeignKey("DoctorId");

                    b.Navigation("AppTicket");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Models.AppAppointment", b =>
                {
                    b.HasOne("Models.Company", "Company")
                        .WithMany("AppAppointments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Staff", "Doctor")
                        .WithMany("AppAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Models.Patient", "Patient")
                        .WithMany("AppAppointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Company");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Models.AppCost", b =>
                {
                    b.HasOne("Models.Staff", "FinancialApprover")
                        .WithMany("AppCosts")
                        .HasForeignKey("FinancialApproverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.FinancialRecord", "FinancialRecord")
                        .WithMany("AppCosts")
                        .HasForeignKey("FinancialRecordId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FinancialApprover");

                    b.Navigation("FinancialRecord");
                });

            modelBuilder.Entity("Models.AppInventoryDependencies", b =>
                {
                    b.HasOne("Models.AppInventory", "AppInventory")
                        .WithMany()
                        .HasForeignKey("AppInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.AppInventory", "Dependant")
                        .WithMany("Dependencies")
                        .HasForeignKey("DependantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppInventory");

                    b.Navigation("Dependant");
                });

            modelBuilder.Entity("Models.AppInventoryItem", b =>
                {
                    b.HasOne("Models.AppInventory", "AppInventory")
                        .WithMany("AppInventoryItems")
                        .HasForeignKey("AppInventoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Company", "Company")
                        .WithMany("AppInventoryItems")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppInventory");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Models.AppTicket", b =>
                {
                    b.HasOne("Models.AppCost", "AppCost")
                        .WithOne("AppTicket")
                        .HasForeignKey("Models.AppTicket", "AppCostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.AppAppointment", "Appointment")
                        .WithMany("Tickets")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Company", null)
                        .WithMany("AppTickets")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Models.Patient", null)
                        .WithMany("AppTickets")
                        .HasForeignKey("PatientId");

                    b.Navigation("AppCost");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Models.AppUserRole", b =>
                {
                    b.HasOne("Models.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Company", b =>
                {
                    b.HasOne("Models.AppUser", "AppUser")
                        .WithOne("Company")
                        .HasForeignKey("Models.Company", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Models.CompanyContract", b =>
                {
                    b.HasOne("Models.AppCost", "AppCost")
                        .WithOne("CompanyContract")
                        .HasForeignKey("Models.CompanyContract", "AppCostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Company", "Company")
                        .WithMany("CompanyContracts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppCost");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Models.FinancialRecordPayerPayee", b =>
                {
                    b.HasOne("Models.AppCost", "AppCost")
                        .WithMany("FinancialRecordPayerPayees")
                        .HasForeignKey("AppCostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.AppUser", "AppUser")
                        .WithMany("FinancialRecordPayerPayees")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.FinancialRecord", "FinancialRecord")
                        .WithMany("FinancialRecordPayerPayees")
                        .HasForeignKey("FinancialRecordId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppCost");

                    b.Navigation("AppUser");

                    b.Navigation("FinancialRecord");
                });

            modelBuilder.Entity("Models.FinancialRequest", b =>
                {
                    b.HasOne("Models.FinancialRecord", "FinancialRecord")
                        .WithMany("FinancialRequest")
                        .HasForeignKey("FinancialRecordId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FinancialRecord");
                });

            modelBuilder.Entity("Models.NextOfKin", b =>
                {
                    b.HasOne("Models.AppUser", "AppUser")
                        .WithOne("NextOfKin")
                        .HasForeignKey("Models.NextOfKin", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Models.Patient", b =>
                {
                    b.HasOne("Models.AppUser", "AppUser")
                        .WithOne("Patient")
                        .HasForeignKey("Models.Patient", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Company", "Company")
                        .WithMany("Patients")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Models.PatientContract", b =>
                {
                    b.HasOne("Models.AppCost", "AppCost")
                        .WithOne("PatientContract")
                        .HasForeignKey("Models.PatientContract", "AppCostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Patient", "Patient")
                        .WithMany("PatientContracts")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppCost");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Models.PatientVital", b =>
                {
                    b.HasOne("Models.Staff", "Nurse")
                        .WithMany("PatientVitals")
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Patient", "Patient")
                        .WithMany("PatientVitals")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Models.SalaryPaymentHistory", b =>
                {
                    b.HasOne("Models.Staff", "Staff")
                        .WithMany("SalaryPaymentHistory")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Models.Staff", b =>
                {
                    b.HasOne("Models.AppUser", "AppUser")
                        .WithOne("Staff")
                        .HasForeignKey("Models.Staff", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Models.StaffContract", b =>
                {
                    b.HasOne("Models.Staff", "Staff")
                        .WithMany("StaffContract")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Models.StaffTimeTable", b =>
                {
                    b.HasOne("Models.Staff", "Staff")
                        .WithMany("TimeTable")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Models.SurgeryTicketPersonnel", b =>
                {
                    b.HasOne("Models.AppUser", "Personnel")
                        .WithMany("SurgeryTicketPersonnels")
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.TicketInventory", "TicketInventory")
                        .WithMany("SurgeryTicketPersonnels")
                        .HasForeignKey("TicketInventoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Personnel");

                    b.Navigation("TicketInventory");
                });

            modelBuilder.Entity("Models.TicketInventory", b =>
                {
                    b.HasOne("Models.AdmissionPrescription", "AdmissionPrescription")
                        .WithMany("TicketInventories")
                        .HasForeignKey("AdmissionPrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.AppInventory", "AppInventory")
                        .WithMany("TicketInventories")
                        .HasForeignKey("AppInventoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.AppTicket", "AppTicket")
                        .WithMany("TicketInventories")
                        .HasForeignKey("AppTicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.Navigation("AdmissionPrescription");

                    b.Navigation("AppInventory");

                    b.Navigation("AppTicket");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Models.UserFile", b =>
                {
                    b.HasOne("Models.AppUser", "AppUser")
                        .WithMany("UserFiles")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Models.AdmissionPrescription", b =>
                {
                    b.Navigation("TicketInventories");
                });

            modelBuilder.Entity("Models.AppAppointment", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Models.AppCost", b =>
                {
                    b.Navigation("AppTicket");

                    b.Navigation("CompanyContract");

                    b.Navigation("FinancialRecordPayerPayees");

                    b.Navigation("PatientContract");
                });

            modelBuilder.Entity("Models.AppInventory", b =>
                {
                    b.Navigation("AppInventoryItems");

                    b.Navigation("Dependencies");

                    b.Navigation("TicketInventories");
                });

            modelBuilder.Entity("Models.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Models.AppTicket", b =>
                {
                    b.Navigation("AdmissionPrescriptions");

                    b.Navigation("TicketInventories");
                });

            modelBuilder.Entity("Models.AppUser", b =>
                {
                    b.Navigation("AdmissionPrescriptions");

                    b.Navigation("Company");

                    b.Navigation("FinancialRecordPayerPayees");

                    b.Navigation("NextOfKin");

                    b.Navigation("Patient");

                    b.Navigation("Staff");

                    b.Navigation("SurgeryTicketPersonnels");

                    b.Navigation("UserFiles");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Models.Company", b =>
                {
                    b.Navigation("AppAppointments");

                    b.Navigation("AppInventoryItems");

                    b.Navigation("AppTickets");

                    b.Navigation("CompanyContracts");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Models.FinancialRecord", b =>
                {
                    b.Navigation("AppCosts");

                    b.Navigation("FinancialRecordPayerPayees");

                    b.Navigation("FinancialRequest");
                });

            modelBuilder.Entity("Models.Patient", b =>
                {
                    b.Navigation("AppAppointments");

                    b.Navigation("AppTickets");

                    b.Navigation("PatientContracts");

                    b.Navigation("PatientVitals");
                });

            modelBuilder.Entity("Models.Staff", b =>
                {
                    b.Navigation("AppAppointments");

                    b.Navigation("AppCosts");

                    b.Navigation("PatientVitals");

                    b.Navigation("SalaryPaymentHistory");

                    b.Navigation("StaffContract");

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("Models.TicketInventory", b =>
                {
                    b.Navigation("SurgeryTicketPersonnels");
                });
#pragma warning restore 612, 618
        }
    }
}
